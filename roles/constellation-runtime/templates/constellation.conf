server {
    listen 80;
    server_name {{ constellation_server_name }};

{% if constellation_use_ssl == true %}
    location /.well-known/acme-challenge/ {
        alias /var/run/acme/acme-challenge/;
    }

    return 301 https://$server_name$request_uri;
}

server {
    listen 443;
    server_name {{ constellation_server_name }};

    ssl on;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate {{ constellation_certificate_path }};
    ssl_certificate_key {{ constellation_certificate_key }};
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;


    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/ssl/certs.pem;

    resolver 8.8.8.8;

    client_max_body_size 10M;

    location /.well-known/acme-challenge/ {
        alias /var/run/acme/acme-challenge/;
    }
{% endif %}
    location / {
        include /etc/nginx/uwsgi_params;
        uwsgi_pass unix:/tmp/constellation.sock;
    }

    location /media {
        alias /opt/constellation/media_root;
    }

    location /static {
        alias /opt/constellation/static_root;
    }
}
